<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BindParameterNotDefined" xml:space="preserve">
    <value>Unable to find definition of bind parameter '{0}', define bind parameters on ISql interface.</value>
  </data>
  <data name="ColumnAlreadyAdded" xml:space="preserve">
    <value>The column '{0}' is already added for the '{1}' operation. Duplicates are not allowed.</value>
  </data>
  <data name="DbAlreadyRegistered" xml:space="preserve">
    <value>The database connection type and connection string is already registered under the name '{0}'.</value>
  </data>
  <data name="DbContextExists" xml:space="preserve">
    <value>The database context is already instantiated for the current thread and cannot be overriden.</value>
  </data>
  <data name="DbKeyNull" xml:space="preserve">
    <value>The property '{0}' specified as the database key cannot be null.</value>
  </data>
  <data name="DbNameAlreadyRegistered" xml:space="preserve">
    <value>The database name '{0}' has already been registered with the DbManager.</value>
  </data>
  <data name="DbNameNotRegistered" xml:space="preserve">
    <value>The database name '{0}' is not registered with the DbManager.</value>
  </data>
  <data name="DuplicateBindParameter" xml:space="preserve">
    <value>The bind parameter '{0}' is already defined.</value>
  </data>
  <data name="DuplicateColumn" xml:space="preserve">
    <value>The column '{0}' is already defined.</value>
  </data>
  <data name="DuplicateFromEntity" xml:space="preserve">
    <value>Table/alias '{0}' already specified. Ensure aliases are specified correctly.</value>
  </data>
  <data name="InvalidConnectionType" xml:space="preserve">
    <value>The connection type '{0}' cannot be found. Unable to connect to the database '{1}'.</value>
  </data>
  <data name="InvalidCteStatement" xml:space="preserve">
    <value>The statement is not containing a CTE statement.</value>
  </data>
  <data name="InvalidFrom" xml:space="preserve">
    <value>The 'From' statement is invalid, expecting only selection of 1 table.</value>
  </data>
  <data name="InvalidInsertReturnKeyStatement" xml:space="preserve">
    <value>The insert return key statement requires 1 placeholder which is not the case. Check the specific DbConfiguration implementation for database type '{0}'.</value>
  </data>
  <data name="LoggingAlreadyEnabled" xml:space="preserve">
    <value>The DbManager is alreay set to enbale logging</value>
  </data>
  <data name="NoConnectionString" xml:space="preserve">
    <value>The database connection string is not specified. You must call 'DbMananger.ConnectionString' to set your connection string.</value>
  </data>
  <data name="NoCurrentJoinDefinition" xml:space="preserve">
    <value>There is no current join definition to perform a 'join on' criteria.</value>
  </data>
  <data name="NoDataTypesMapped" xml:space="preserve">
    <value>here are no data type mappings defined for schema '{0}'.</value>
  </data>
  <data name="NoDbContext" xml:space="preserve">
    <value>The database context cannot be resolved for the current 'dbName', Please ensure you have registered your database.</value>
  </data>
  <data name="NoDbType" xml:space="preserve">
    <value>The database type is not specified. You must call 'DbMananger.DatabaseType' and set the type.</value>
  </data>
  <data name="NoMappingForDataType" xml:space="preserve">
    <value>There is no data type mapping found between .Net and database schema '{0}' for data type of '{1}'.</value>
  </data>
  <data name="StoredProcNameNull" xml:space="preserve">
    <value>The name of the stored procedure is not specified</value>
  </data>
  <data name="TransactionAlreadyStarted" xml:space="preserve">
    <value>Unable to start transaction for it has already been started.</value>
  </data>
  <data name="TransactionCommitted" xml:space="preserve">
    <value>The transaction is already committed and {0} cannot be performed.</value>
  </data>
  <data name="TransactionNotStarted" xml:space="preserve">
    <value>Unable to {0} because the transaction has not been created.</value>
  </data>
</root>